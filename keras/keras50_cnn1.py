from keras.models import Sequential
from keras.layers import Conv2D , MaxPooling2D, Dense, Flatten
# 2D그림 읽어서 레이어에 저장하겠다.

model = Sequential()
model.add(Conv2D(10, (2,2), input_shape = (10,10,1))) # 나가는 값 9,9,10
# 컨블루션을 해서 나가는 값이 10개다. (2,2) 2x2 행렬로 만듬.  (10,10,1) 3차원. 
# (10,10,1) 가로 세로가 10 x 10
# (10,10,1) 혹은 3을 많이 봄. 1은 흑백, 3은 컬러 
# 만장이다. (10000, 10, 10, 1) 
model.add(Conv2D(7,(2,2)))                  # (7,7,7)
# 한번에 특징점 찾기가 힘듬. 그렇기에 자른걸 다시 한번 특징점 찾기.
model.add(Conv2D(5,(2,2), padding= 'same')) # 7,7,5
model.add(Conv2D(5,(2,2)))                  # 6,6,5
# model.add(Conv2D(5,(2,2), strides= 2))      # 3,3,5
# model.add(Conv2D(5,(2,2), strides= 2 ,padding = 'same'))      # 3,3,5 , 우선순위는 stride!

# padding을 해주는 이유는 중간에 데이터는 훈련을 1번씩은 더 하는데 사이드와 같은 경우 훈련 횟수가
# 상대적으로 적음. input_shape와 동일한 크기로 다음 레이어에 전달해준다.
# padding의 디폴트 옵션 valid

# stride의 기본은 1, 이 숫자가 2면 2칸씩 이동, 3이면 3칸씩 이동.
# model.add(MaxPooling2D(pool_size = 2))
model.add(Flatten())
# Flatten 평평하게 해주다. 겹겹히 쌓여있던 것들을 한 줄로 만들어줌. 2차로 만들어줌.
model.add(Dense(1))

model.summary()

# 4차원에서 4차원으로 변환됨. 

'''
Flatten 전
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d_1 (Conv2D)            (None, 9, 9, 10)          50
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 8, 8, 7)           287
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 8, 8, 5)           145
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 7, 7, 5)           105
_________________________________________________________________
dense_1 (Dense)              (None, 7, 7, 1)           6
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 3, 3, 1)           0
=================================================================
'''